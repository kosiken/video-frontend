import React, { useState, useEffect } from "react";
import { useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";
import Grid from "@mui/material/Grid";
import Container from "../../components/Container";
import VisibilityIcon from "@mui/icons-material/Visibility";
import FavoriteIcon from "@mui/icons-material/Favorite";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import ReactPlayer from "react-player";
import { useDebounce, useDebounceCallback } from "@react-hook/debounce";
import SkipPreviousIcon from "@mui/icons-material/SkipPrevious";
import PlayArrowIcon from "@mui/icons-material/PlayArrow";
import SkipNextIcon from "@mui/icons-material/SkipNext";
import Centered from "../../components/Centered";
import PauseIcon from "@mui/icons-material/Pause";
import Slider from "@mui/material/Slider";
import { TextField } from "@mui/material";
import useHover from "../../hooks/useHover";
import OpenInFullIcon from '@mui/icons-material/OpenInFull';
import CloseFullscreenIcon from '@mui/icons-material/CloseFullscreen';
import useWindowSize, { Size } from "../../hooks/useWindowSize";

const View = () => {
    const url = "/video.mp4"//https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/360/Big_Buck_Bunny_360_10s_1MB.mp4

    const videoRef: any = React.useRef();
    const ref: any = React.useRef();
    const timeoutRef = React.useRef(0)
    const val = useHover(ref)
  const theme = useTheme();
  const [playing, setPlaying] = useState(false);
  const [playedSecondString, setPlayedSecondString] = useState('00:00');
  const [playedSeconds, setPlayedSeconds] = useState(0);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(0);
  const [durationString, setDurationString] = useState('00:00');
  const [liked, setLiked] = useState(false);
  const [requestBuffer, setRequestBuffer] = useState(0);
  const [value, setValue] = useDebounce(false, 1000);
  const [show, setShow] = useState(false);
  const [fullScreen, setFullScreen] = useState(false);

  const getMd = () => {
      if(fullScreen) {
          return  show? 'block': 'none';
      }
      else return val ? 'block': 'none'
  }

  useEffect(() => {
      const func = (event: Event) => {
        // document.fullscreenElement will point to the element that
        // is in fullscreen mode if there is one. If there isn't one,
        // the value of the property is null.
        if (document.fullscreenElement) {
          console.log(`Element: ${document.fullscreenElement.id} entered full-screen mode.`);
        } else {
          if(fullScreen) setFullScreen(false);
        }
      }
    document.addEventListener('fullscreenchange', func);
      return () => {
        document.removeEventListener('fullscreenchange', func);
      }
  }, )

  const size: Size = useWindowSize();
 
  useEffect(() => {
     if(!!ref.current&& fullScreen) {
         ref.current.requestFullscreen();
     }
     else if( !fullScreen) {

        document.exitFullscreen().catch(console.log);
      

        
     }
  }, [fullScreen])
  const toggleVideoLike = () => {
      if(ref.current) {
          ref.current.requestFullscreen()
      }
    setLiked(!liked);
  };
  const sendApiRequest = () => {
    if (requestBuffer > 0) console.log("sending request");
    setRequestBuffer(requestBuffer + 1);
  };
  useEffect(() => {
    setValue(liked);

    return () => {};
  }, [liked, setValue]);

  useEffect(() => {
    sendApiRequest();
    return () => {};
  }, [value]);

  useEffect(() => {
     

      if(timeoutRef.current !== 0) {
          clearTimeout(timeoutRef.current)
      }
    timeoutRef.current =   window.setTimeout(() => {
          setShow(false)
          timeoutRef.current = 0
      }, 2000)

      return () => {
        if( timeoutRef.current !== 0) {
            clearTimeout(timeoutRef.current)
        }
      
    }
    
  }, [show])
  var toHHMMSS = (secs: number) => {
    var sec_num = Math.floor(secs);
    var hours   = Math.floor(sec_num / 3600)
    var minutes = Math.floor(sec_num / 60) % 60
    var seconds = sec_num % 60

    return [hours,minutes,seconds]
        .map(v => v < 10 ? "0" + v : v)
        .filter((v,i) => v !== "00" || i > 0)
        .join(":")
}
  useEffect(() => {


    
    setDurationString(toHHMMSS(duration))
      return () => {
        
      }
  }, [duration])


  useEffect(() => {


    
    setPlayedSecondString(toHHMMSS(playedSeconds))
      return () => {
        
      }
  }, [playedSeconds])
const getWidth = ( )=> {
   return fullScreen ? window.innerWidth + 'px' : size.width ? (size.width < 640 ? size.width + 'px' : '640px'): '640px'
}

  return (
    <Box style={{ marginTop: "4em" }}>
      <Grid container spacing={2}>
        <Grid  item md={8} sm={12}>
          <Container sx={{ paddingTop: "1em", maxWidth: "640px" }}>
            <div onClick={() => setShow(true)} style={{ position: "relative" }} ref={ref}>
              <ReactPlayer
              ref={videoRef}
              onProgress={(state) => {
                  setProgress(state.played)
                  setPlayedSeconds(state.playedSeconds)
              }}
              height={'100%'}
              width={getWidth()}
              onDuration={setDuration}
                playing={playing}
                url={url}
              />

         <Box sx={{position: 'absolute', bottom: 10, left: 0, width: '100%', display: {xs: show? 'block': 'none', sm:  show? 'block': 'none', md: getMd()}}}>
         <Centered sx={{ marginTop: "1em" }}>
                <Box sx={{width: '85%', backgroundColor: "#000000ad", p:1}}>
              


                <Box
                    alignItems="center"
                    justifyContent="space-between"
                    display="flex"
                    sx={{ alignItems: "center", }}
                  >
                        <IconButton  onClick={() => setFullScreen(!fullScreen)}  style={{color: 'white'}}  aria-label="next">
                     {fullScreen  ? <CloseFullscreenIcon/> :  <OpenInFullIcon />}
                    </IconButton>
                  <Box
                    alignItems="center"
                    display="flex"
                    sx={{ alignItems: "center", }}
                  >
                    <IconButton style={{color: 'white'}} aria-label="previous">
                      <SkipPreviousIcon />
                    </IconButton>
                    <IconButton
                      onClick={() => setPlaying(!playing)}
                      sx={{
                        margin: "0 0.5em",color: 'white'
                      }}
                       
                      aria-label="play/pause"
                    >
                      {!playing ? (
                        <PlayArrowIcon sx={{ height: 30, width: 30 }} />
                      ) : (
                        <PauseIcon sx={{ height: 30, width: 30}} />
                      )}
                    </IconButton>
                    <IconButton   style={{color: 'white'}}  aria-label="next">
                      <SkipNextIcon />
                    </IconButton>
                  </Box>
                  <Typography id="seek" sx={{color: 'white'}}>{playedSecondString}/{durationString}</Typography>
                  </Box>
                  <Box sx={{ width: "100%" }}>
                    <Slider
                      size="small"
                      value={progress * 100}
                      aria-label="Small"
                      valueLabelDisplay="off"
                      color="secondary"
                      
                      
                      onChange={(v, n) => {
                         if(videoRef.current){
                          let num: number = Array.isArray(n) ? n[0] : n;
                          setProgress(num / 100)
                          videoRef.current.seekTo( num/ 100, "fraction");
                        }
                      }}
                    />
                  </Box>
                </Box>
              </Centered>
         </Box>
            </div>

            <Box display="flex" marginTop={1}>
              <Box
                display="flex"
                padding={"0 2em 0 0"}
                color="primary"
                alignItems={"center"}
              >
                {" "}
                <VisibilityIcon color="primary" />{" "}
                <Typography
                  color="primary"
                  variant="subtitle1"
                  component="span"
                >
                  {" "}
                  1203 views
                </Typography>
              </Box>
              <Divider orientation="vertical" flexItem />
              <Box display="flex" padding={"0 0 0 2em"} alignItems={"center"}>
                {" "}
                <IconButton
                  onClick={toggleVideoLike}
                  color={liked ? "error" : "default"}
                >
                  {" "}
                  <FavoriteIcon color="inherit" />{" "}
                </IconButton>{" "}
                <Typography
                  color="secondary"
                  variant="subtitle1"
                  component="span"
                >
                  {" "}
                  1203 views
                </Typography>
              </Box>
            </Box>
          </Container>
        </Grid>
        <Grid item md={4} sm={12}>
          <Box padding={2}>
    
            <Typography variant="caption">Video Creator {val.toString()}</Typography>
            <Typography variant="h4">Video Title </Typography>
            <Typography variant="body2">
              Lorem ipsum dolor sit amet consectetur, adipisicing elit. Vitae
              unde provident quae praesentium, non sint. Rerum, ex error
              distinctio ut blanditiis magni voluptates numquam cumque. Dolor
              itaque cupiditate repellendus a.
            </Typography>
          </Box>
        </Grid>
      </Grid>
    </Box>
  );
};

export default View;
